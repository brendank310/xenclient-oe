################################################################################
SHORT DESCRIPTION: 
################################################################################
Enables QEMU stubdom support

################################################################################
LONG DESCRIPTION: 
################################################################################
QEMU 1.4 currently doesn't work in a stubdomain. When it's booting, the 
event channel bind functions will fail. This is because Xen expects the 
device model to be in dom0. To correct this problem, we added some code to 
QEMU that basically tells the hypervisor what the domid is of the device
model. 

The second piece of code that was added was a switch to turn off the backend 
drivers. Since we are in a stubdomain, we do not need to turn on the backend
drivers because dom0 is doing that fo us. 

Note that this code was taken from the following blog post:

https://blog.xenproject.org/2012/12/12/linux-stub-domain/

Basically, all we did was grab the source code, which contains a link to the 
following git repo:

git clone git://xenbits.xen.org/people/aperard/qemu-dm.git
git checkout stubdom-preview1

From there, you can do a git diff to see the changes that were made to setup 
QEMU in a stubdomain. Since we use BitBake to compile QEMU for both dom0 and 
the stubdomain, we do not need to include the extra complexity to turn this
on / off, so the patch is pretty simple. Basically, we just need to tell the
hypervisor that this guest is a stubdomain, and then we compile out the part 
that starts up the backend drivers since this is done for us by dom0. 

################################################################################
CHANGELOG 
################################################################################
Intial Commit: Rian Quinn, quinnr@ainfosec.com, 3/16/2015

################################################################################
REMOVAL 
################################################################################
This patch can be removed from QEMU once it fully supports being executed in a
stubdomain on it's own. Likely for that to happen, this code will need to be 
included in QEMU upstream. Once that occurs, this patch can be removed from 
out patch queue. 

################################################################################
UPSTREAM PLAN 
################################################################################
We should attempt to upstream this patch ASAP. To do that however, we will need
to add in the logic to enable / disable stubdomain support. We don't do that 
here as it greatly simplifies the patch, which currently we have to maintain. 
However, once we are ready to upstream, you can basically go to the repo
provided above, and most of the needed logic is there to turn on / off 
stubdomain support. 

################################################################################
INTERNAL DEPENDENCIES 
################################################################################
None

################################################################################
PATCHES 
################################################################################
diff -Naur qemu-1.4.0/xen-all.c qemu-1.4.0-hvm-param-dm-domain/xen-all.c
--- qemu-1.4.0/xen-all.c 2013-02-15 18:05:35.000000000 -0500
+++ qemu-1.4.0-hvm-param-dm-domain/xen-all.c 2015-03-11 02:42:36.712403400 -0400
@@ -1105,6 +1105,11 @@
     state->suspend.notify = xen_suspend_notifier;
     qemu_register_suspend_notifier(&state->suspend);
 
+    // We need to tell the hypervisor what the domid of the device model is. 
+    // Usually, it's expecting dom0, but with a stubdomain, that is not the 
+    // case
+    xc_set_hvm_param(xen_xc, xen_domid, HVM_PARAM_DM_DOMAIN, DOMID_SELF);
+
     xc_get_hvm_param(xen_xc, xen_domid, HVM_PARAM_IOREQ_PFN, &ioreq_pfn);
     DPRINTF("shared page at pfn %lx\n", ioreq_pfn);
     state->shared_page = xc_map_foreign_range(xen_xc, xen_domid, XC_PAGE_SIZE,
@@ -1165,9 +1170,15 @@
         fprintf(stderr, "%s: xen backend core setup failed\n", __FUNCTION__);
         exit(1);
     }
+
+    // Since this is in a stubdom, there is no needed to setup the backend 
+    // devices. 
+#if 0
     xen_be_register("console", &xen_console_ops);
     xen_be_register("vkbd", &xen_kbdmouse_ops);
     xen_be_register("qdisk", &xen_blkdev_ops);
+#endif
+
     xen_read_physmap(state);
 
     return 0;
