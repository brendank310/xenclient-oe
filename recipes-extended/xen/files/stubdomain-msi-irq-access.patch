--- a/xen/arch/x86/physdev.c
+++ b/xen/arch/x86/physdev.c
@@ -141,8 +144,18 @@ int physdev_map_pirq(domid_t domid, int
 
     case MAP_PIRQ_TYPE_MSI:
         irq = *index;
-        if ( irq == -1 )
+        if ( irq == -1 ) {
             irq = create_irq(NUMA_NO_NODE);
+            /* Allow stubdomain to deal with this IRQ. */
+            if ( d == current->domain->target )
+            {
+                ret = irq_permit_access(current->domain, irq);
+                if ( ret )
+                    printk(XENLOG_G_ERR "Could not grant stubdom%u access to IRQ%d (error %d)\n",
+                           current->domain->domain_id, irq, ret);
+
+            }
+        }
 
         if ( irq < nr_irqs_gsi || irq >= nr_irqs )
         {
@@ -211,7 +229,13 @@ int physdev_map_pirq(domid_t domid, int
     spin_unlock(&d->event_lock);
     spin_unlock(&pcidevs_lock);
     if ( (ret != 0) && (type == MAP_PIRQ_TYPE_MSI) && (*index == -1) )
+    {
+        if ( (d == current->domain->target) &&
+             irq_deny_access(current->domain, irq) )
+            printk(XENLOG_G_ERR "dom%d: could not revoke access to IRQ%d.\n",
+                   d->domain_id, irq );
         destroy_irq(irq);
+    }
  free_domain:
     rcu_unlock_domain(d);
     return ret;
@@ -242,6 +266,18 @@ int physdev_unmap_pirq(domid_t domid, in
 
     spin_lock(&pcidevs_lock);
     spin_lock(&d->event_lock);
+    /* Remove stubdomain's permission on IRQ. */
+    if (d == current->domain->target)
+    {
+        int irq;
+
+        irq = domain_pirq_to_irq(d, pirq);
+        if ( irq <= 0 )
+            printk(XENLOG_G_ERR "dom%d invalid pirq:%d!\n", d->domain_id, pirq);
+        else if ( irq_deny_access(current->domain, irq) )
+            printk(XENLOG_G_ERR "Could not revoke stubdom%u access to IRQ%d.\n",
+                        current->domain->domain_id, irq);
+    }
     ret = unmap_domain_pirq(d, pirq);
     spin_unlock(&d->event_lock);
     spin_unlock(&pcidevs_lock);

